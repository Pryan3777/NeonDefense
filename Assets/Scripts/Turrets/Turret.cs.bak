using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

// SUPERCLASS FOR ALL TURRETS

public abstract class Turret : Item
{
    public static int TURRET_DEFAULT = 0;
    public static int TURRET_BURST = 1;
    public static int TURRET_LASER = 2;
    public static int TURRET_MORTAR = 3;

    protected Transform _turretHolder;
    // FIXME: Need to adjust datatype from GameObject to Enemy
    protected List<GameObject> targetList = new List<GameObject>();
    [SerializeField] protected Bullet bullet;
    [SerializeField] protected float shootWaitSecond;
    protected float currentTime;
    protected float startTime;
    protected int numKills = 0;

    [SerializeField] protected Color color;
    [SerializeField] protected float damageAmount;

    protected string effect = "No Effect";
    protected float freezeDuration = 0;
    protected float poisonDuration = 0;
    private static int DURATION_START_TIME = 1; // start the durations at 1 second


    protected int damageLevel = 1;
    protected int freezeLevel = 0;
    protected int poisonLevel = 0;
    protected int upgradeDamageCost = 100;
    protected int upgradeFreezeCost = 200;
    protected int upgradePoisonCost = 300;
    protected bool isEffectUpgradeable = false;


    public static float UPGRADE_RATIO = 1.2f;


    // Start is called before the first frame update
    protected virtual void Start()
    {
        _turretHolder = GridManager.Instance.GetTurretHolder();

        if (_turretHolder != null)
            transform.SetParent(_turretHolder);

        currentTime = Time.time;
        startTime = Time.time;

        // store the color of this turret for other scripts
        color = GetComponent<SpriteRenderer>().color;
    }

    // Update is called once per frame
    protected void Update()
    {
        Shoot();
    }

    // Shoot a bullet towards our target if we detect one and\
    // We waited enough to fire
    protected virtual void Shoot()
    {
        if (IsEnemyInRange() && currentTime - startTime > shootWaitSecond)
        {
            if (targetList.Count > 0)
            {
                var tempBullet = Instantiate(bullet, transform.position, Quaternion.identity);
                tempBullet.Init(damageAmount, color, this, effect);
				
				
				Transform tr = null;
                if(targetList.Count > 0 && targetList[0] != null)tr = targetList[0].transform;

                if (targetList.Count > 0 && tempBullet != null && tr != null)
                    tempBullet.ShootTowards(tr);
            }

            startTime = Time.time;
        }

        currentTime = Time.time;
    }

    protected bool IsEnemyInRange()
    {
        return targetList.Count > 0;
    }

    // Listener event that adds an enemy to our targetList if 
    // it enters the turret range
    protected virtual void OnTriggerEnter2D(Collider2D col)
    {
        if (col.tag == "Enemy")
        {
            targetList.Add(col.gameObject);
        }
    }

    // Listener event that removes an enemy to our targetList if 
    // it leaves the turret range
    protected virtual void OnTriggerExit2D(Collider2D col)
    {
        targetList.Remove(col.gameObject);
    }

    public Color GetColor()
    {
        return color;
    }

    public float GetDamage()
    {
        return damageAmount;
    }

    public string GetDamageString()
    {
        return damageAmount + " (" + damageLevel + ")";
    }

    public int GetKills()
    {
        return numKills;
    }

    public void IncrementKills()
    {
        numKills++;
    }

    public void UpgradeDamage()
    {
        if (!EconomyManager.Instance.UpgradeDamage(this))
            return;

        damageLevel++;

        damageAmount += GetUpgradeDamageAmount();
    }

    public bool UpgradeFreeze()
    {
        if (!EconomyManager.Instance.UpgradeFreeze(this)) return false;

        if (effect == "Poison") return false;

        if (freezeDuration == 0)
        {
            freezeLevel++;
            freezeDuration = DURATION_START_TIME; // starting seconds
            effect = "Freeze";
            return true;
        }

        freezeLevel++;
        freezeDuration += GetUpgradeFreezeAmount();
        effect = "Freeze";

        return true;
    }

    public bool UpgradePoison()
    {
        if (!EconomyManager.Instance.UpgradePoison(this)) return false;

        if (effect == "Freeze") return false;

        if (poisonDuration == 0)
        {
            poisonLevel++;
            poisonDuration = DURATION_START_TIME; // starting seconds
            effect = "Poison";
            return true;
        }

        poisonLevel++;
        poisonDuration *= UPGRADE_RATIO;
        effect = "Poison";

        return true;
    }

    public string GetTurretEffect()
    {
        return effect;
    }

    public string GetTurretEffectString()
    {
        if (effect == "Freeze")
            return freezeDuration.ToString("n1") + "s";

        return poisonDuration.ToString("n1") + "s"; ;
    }

    public float GetFreezeDuration()
    {
        return freezeDuration;
    }

    public float GetPoisonDuration()
    {
        return poisonDuration;
    }

    public int GetUpgradeDamageCost()
    {
        return upgradeDamageCost;
    } 

    public int GetUpgradeFreezeCost()
    {
        return upgradeFreezeCost;
    }

    public int GetUpgradePoisonCost()
    {
        return upgradePoisonCost;
    }

    public int GetUpgradeDamageAmount()
    {
        return (int)Mathf.Round(damageAmount * UPGRADE_RATIO - damageAmount);
    }

    public float GetUpgradeFreezeAmount()
    {
        if (freezeLevel == 0)
            return DURATION_START_TIME;

        return (freezeDuration * UPGRADE_RATIO - freezeDuration);
    }

    public float GetUpgradePoisonAmount()
    {
        if (poisonLevel == 0)
            return DURATION_START_TIME;

        return (poisonDuration * UPGRADE_RATIO - poisonDuration);
    }

    public bool IsEffectUpgradeable()
    {
        return isEffectUpgradeable;
    }
}
